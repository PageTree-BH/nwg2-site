


// BREAKPOINT SIZER :

$xs: ( min:  300px );
$sm: ( min:  768px );
$md: ( min:  992px );
$lg: ( min: 1200px );
$xl: ( min: 1500px );

$xs-only: ( min: map-get($xs, min), max: map-get($sm, min) - 1 );
$sm-only: ( min: map-get($sm, min), max: map-get($md, min) - 1 );
$md-only: ( min: map-get($md, min), max: map-get($lg, min) - 1 );
$lg-only: ( min: map-get($lg, min), max: map-get($xl, min) - 1 );
$xl-only: ( min: map-get($xl, min) );








@mixin ptBreakpoint($map) {
	$query: "";

	@if map-has-key($map, min) {
		$query: append($query, "(min-width: #{map-get($map, min)})")
	}

    @if map-has-key($map, min) and map-has-key($map, max) {
    	$query: append($query, "and")
    }

    @if map-has-key($map, max) {
    	$query: append($query, "(max-width: #{map-get($map, max)})")
    }

	@media screen and #{$query} { @content; }

}

















@mixin ptPseudoMax(){
    content:'';
    position:absolute;
    top:0; left:0; bottom:0; right:0;
    width:100%;
    height:100%;
}





















@mixin ptPos($num) {
	display:flex;
	flex-direction:column;
	justify-content:center;
	// align-items:center;
	// height:100%;
	// width:100%;

	@if $num == 1 {
	    align-items: flex-start;
		justify-content:  flex-start;
		// text-align: left;
	}
	@if $num == 2 {
	    align-items: center;
		justify-content:  flex-start;
		// text-align: center;
	}
	@if $num == 3 {
	    align-items: flex-end;
		justify-content:  flex-start;
		// text-align: right;
	}
	@if $num == 4 {
	    align-items: flex-start;
		justify-content:  center;
		// text-align: left;
	}
	@if $num == 5 {
	    align-items: center;
		justify-content:  center;
		// text-align: center;
		// p{
		// 	text-align:left;
		// }
	}
	@if $num == 6 {
	    align-items: flex-end;
		justify-content:  center;
		// text-align: right;
	}
	@if $num == 7 {
	    align-items: flex-start;
		justify-content:  flex-end;
		// text-align: left;
	}
	@if $num == 8 {
	    align-items: center;
		justify-content:  flex-end;
		text-align: center;
		// text-align: right;
	}
	@if $num == 9 {
	    align-items: flex-end;
		justify-content:  flex-end;
		// text-align: right;
	}
}










@mixin ptZone($n){
	position:relative;
	width:100%;
	min-height:$n+vh;
	@include ptViewport(min-height, $n);
	// @include viewport-unit(height, $n+vh);
}







@mixin ptZoneColors($bg, $h1, $p, $h3:$h1){

    background-color:$bg;

    color:$p;

    h1, h2{
        color:$h1;
    }
    h3, h4, h5{
        color:$h3;
    }
    p{
        color:$p;
    }
    hr{
    	border-color:$p;
    }

}









@mixin ptPadding($p:1em, $psm:2em, $pmd:3em, $plg:$pmd){

    padding:$p;

    @include ptBreakpoint($sm){
        padding:$psm;
    }

    @include ptBreakpoint($md){
        padding:$pmd;
    }

    @if($plg != null){
        @include ptBreakpoint($lg){
        	padding:$plg;
        }
    }

}































/**
 * https://gist.github.com/BenMorel/e9e34c08360ebbbd0634
 *
 * Fix for vw, vh, vmin, vmax on iOS 7.
 * http://caniuse.com/#feat=viewport-units
 *
 * This fix works by replacing viewport units with px values on known screen sizes.
 *
 * iPhone 6 and 6 Plus cannot run iOS 7, so are not targeted by this fix.
 * Target devices running iOS 8+ will incidentally execute the media query,
 * but this will still produce the expected result; so this is not a problem.
 *
 * As an example, replace:
 *
 *   height: 50vh;
 *   font-size: 5vmin;
 *
 * with:
 *
 *   @include ptViewport(height, 50vh);
 *   @include ptViewport(font-size, 5vmin);
 */

@mixin ptViewport($property, $value) {
// @mixin viewport-unit($property, $value) {
  #{$property}: $value;

  $unit: unit($value);

  @if (index((vw, vh, vmin, vmax), $unit) != null) {
    $devices: (
      (768px, 1024px), // iPad (all versions)
      (320px, 480px),  // iPhone 4
      (320px, 568px)   // iPhone 5, 5C, 5S
    );

    @each $device in $devices {
      $device-width: nth($device, 1);
      $device-height: nth($device, 2);

      $device-query: "only screen and (-webkit-min-device-pixel-ratio: 1)";
      $device-query: "#{$device-query} and (device-width: #{$device-width})";
      $device-query: "#{$device-query} and (device-height: #{$device-height})";

      $percent: $value / ($value * 0 + 1); // see https://github.com/sass/sass/issues/533

      $percent-width: $device-width * $percent / 100;
      $percent-height: $device-height * $percent / 100;

      @if ($unit == vmin or $unit == vmax) {
        @media #{$device-query} {
          #{$property}: if($unit == vmin, $percent-width, $percent-height);
        }
      }
      @else {
        @media #{$device-query} and (orientation: portrait) {
          #{$property}: if($unit == vw, $percent-width, $percent-height);
        }

        @media #{$device-query} and (orientation: landscape) {
          #{$property}: if($unit == vw, $percent-height, $percent-width);
        }
      }
    }
  }


}










    /*
    *
    *
    *
    *
    *
        SASS Responsive Padding & Margins Utility Classes

        I sorta half-nabbed a Bootstrap 4 utility SASS function and
        combined it with my Breakpoint mixin to extend it into a responsive utility class.


        .pt-[margin or padding]-[side]-[multiplyer]

    .pt(PageTree)

    -[padding or margin]
    -p = padding
    -m = margin

    -[side]
    -a = all
    -x = left & right
    -y = top & bottom
    -t = top
    -l = left
    -r = right
    -b = bottom

    -ra = Responsive All
    -rx = Responsive X (Left & Right)
    -ry = Responsive Y (Top & Bottom)


    -[multiplyer by base number * each breakpoint]
    -1 = 1rem
    -2 = 2rem
    -3 = 3rem
    -4 = 4rem


    EXAMPLES
    .pt-p-a-0    [ padding-all-0 ]
    .pt-p-a-2    [ padding-all-2rem ]

    .pt-p-ry-1    [ padding-ResponsiveY-(1rem/2rem/4/rem/8rem) ]



*/






$spacer:                     1rem !default;
$spacer-x:                   $spacer !default;
$spacer-y:                   $spacer !default;

$spacers: (
  0: ( x: 0,                  y: 0 ),
  1: ( x: $spacer-x,          y: $spacer-y ),
  2: ( x: ($spacer-x * 1.5),  y: ($spacer-y * 1.5) ),
  3: ( x: ($spacer-x * 3),    y: ($spacer-y * 3) ),
  4: ( x: ($spacer-x * 4),    y: ($spacer-y * 4) ),
  5: ( x: ($spacer-x * 5),    y: ($spacer-y * 5) ),
  6: ( x: ($spacer-x * 6),    y: ($spacer-y * 6) ),
  7: ( x: ($spacer-x * 7),    y: ($spacer-y * 7) ),
  8: ( x: ($spacer-x * 8),    y: ($spacer-y * 8) ),
  9: ( x: ($spacer-x * 9),    y: ($spacer-y * 9) )
) !default;


@each $prop, $abbrev in (margin: m, padding: p) {

    @each $size, $lengths in $spacers {
        $length-x:   map-get($lengths, x);
        $length-y:   map-get($lengths, y);

        .pt-#{$abbrev}-a-#{$size} { #{$prop}:        $length-y $length-x ; }
        .pt-#{$abbrev}-t-#{$size} { #{$prop}-top:    $length-y ; }
        .pt-#{$abbrev}-r-#{$size} { #{$prop}-right:  $length-x ; }
        .pt-#{$abbrev}-b-#{$size} { #{$prop}-bottom: $length-y ; }
        .pt-#{$abbrev}-l-#{$size} { #{$prop}-left:   $length-x ; }

        .pt-#{$abbrev}-x-#{$size} {
          #{$prop}-right:  $length-x ;
          #{$prop}-left:   $length-x ;
        }

        .pt-#{$abbrev}-y-#{$size} {
          #{$prop}-top:    $length-y ;
          #{$prop}-bottom: $length-y ;
        }



        // RESPONSIVE ALL

        .pt-#{$abbrev}-ra-#{$size} {

            #{$prop}: $length-y $length-x ;

            @include ptBreakpoint($sm){
                #{$prop}: $length-y*2 $length-x*2 ;
            }
            @include ptBreakpoint($md){
                #{$prop}: $length-y*3 $length-x*3 ;
            }
            @include ptBreakpoint($lg){
                #{$prop}: $length-y*5 $length-x*5 ;
            }
            @include ptBreakpoint($xl){
                #{$prop}: $length-y*6 $length-x*6 ;
            }
        }



        // RESPONSIVE X      (LEFT AND RIGHT)

        .pt-#{$abbrev}-rx-#{$size} {


            // #{$prop}: $length-x ;

            @include ptBreakpoint($sm){
                #{$prop}-left:  $length-x*2 ;
                #{$prop}-right:  $length-x*2 ;
            }
            @include ptBreakpoint($md){
                #{$prop}-left:  $length-x*3 ;
                #{$prop}-right:  $length-x*3 ;
            }
            @include ptBreakpoint($lg){
                #{$prop}-left:  $length-x*5 ;
                #{$prop}-right:  $length-x*5 ;
            }
            @include ptBreakpoint($xl){
                #{$prop}-left:  $length-x*6 ;
                #{$prop}-right:  $length-x*6 ;
            }
        }



        // RESPONSIVE Y   (TOP AND BOTTOM)

        .pt-#{$abbrev}-ry-#{$size} {


            // #{$prop}: $length-y ;

            @include ptBreakpoint($sm){
                #{$prop}-top: $length-y*2;
                #{$prop}-bottom: $length-y*2;
            }
            @include ptBreakpoint($md){
                #{$prop}-top: $length-y*3;
                #{$prop}-bottom: $length-y*3;
            }
            @include ptBreakpoint($lg){
                #{$prop}-top: $length-y*5;
                #{$prop}-bottom: $length-y*5;
            }
            @include ptBreakpoint($xl){
                #{$prop}-top: $length-y*6;
                #{$prop}-bottom: $length-y*6;
            }
        }








        .pt-#{$abbrev}-rt-#{$size} {

            // #{$prop}: $length-y ;

            @include ptBreakpoint($sm){
                #{$prop}-top: $length-y*2;
            }
            @include ptBreakpoint($md){
                #{$prop}-top: $length-y*3;
            }
            @include ptBreakpoint($lg){
                #{$prop}-top: $length-y*5;
            }
            @include ptBreakpoint($xl){
                #{$prop}-top: $length-y*6;
            }
        }






        .pt-#{$abbrev}-rr-#{$size} {

            // #{$prop}: $length-x ;

            @include ptBreakpoint($sm){
                #{$prop}-right: $length-x*2;
            }
            @include ptBreakpoint($md){
                #{$prop}-right: $length-x*3;
            }
            @include ptBreakpoint($lg){
                #{$prop}-right: $length-x*5;
            }
            @include ptBreakpoint($xl){
                #{$prop}-right: $length-x*6;
            }
        }






        .pt-#{$abbrev}-rb-#{$size} {

            // #{$prop}: $length-y ;

            @include ptBreakpoint($sm){
                #{$prop}-bottom: $length-y*2;
            }
            @include ptBreakpoint($md){
                #{$prop}-bottom: $length-y*3;
            }
            @include ptBreakpoint($lg){
                #{$prop}-bottom: $length-y*5;
            }
            @include ptBreakpoint($xl){
                #{$prop}-bottom: $length-y*6;
            }
        }






        .pt-#{$abbrev}-rl-#{$size} {

            // #{$prop}: $length-x ;

            @include ptBreakpoint($sm){
                #{$prop}-left: $length-x*2;
            }
            @include ptBreakpoint($md){
                #{$prop}-left: $length-x*3;
            }
            @include ptBreakpoint($lg){
                #{$prop}-left: $length-x*5;
            }
            @include ptBreakpoint($xl){
                #{$prop}-left: $length-x*6;
            }
        }




    }

}
